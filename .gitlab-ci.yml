stages:
  - lint
  - test
  - build
  - deploy
  - review
  - dast
  - fuzz
  - staging
  - canary
  - production
  - incremental rollout 10%
  - incremental rollout 25%
  - incremental rollout 50%
  - incremental rollout 100%
  - performance
  - cleanup

variables:
  FF_NETWORK_PER_BUILD: 1

lint:
  stage: lint
  image: node:18-alpine
  before_script:
    - apk add git
    - git checkout $CI_COMMIT_BRANCH
    - git config user.name metahkg-bot
    - git config user.email bot@metahkg.org
    - git remote set-url origin https://root:${GITLAB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}
  script:
    - yarn install
    - yarn lint
    - git commit -a -m lint || exit 0
    - git push origin $CI_COMMIT_BRANCH
  rules:
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: never
    - if: $CI_COMMIT_AUTHOR != "metahkg-bot <bot@metahkg.org>" && ($CI_COMMIT_BRANCH == "dev" || $CI_COMMIT_BRANCH == "master")

sast:
  stage: test
  rules:
    - if: "$CI_COMMIT_TAG"
      when: never

docker-build:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  before_script:
    - apk add nodejs-current
    - docker pull tonistiigi/binfmt:latest
    - docker run --privileged --rm tonistiigi/binfmt --uninstall qemu-*
    - docker run --privileged --rm tonistiigi/binfmt --install all
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - version=$(node -e 'console.log(require("./package.json").version)')
    - major=$(node -e "console.log('${version}'.split('.')[0])")
    - minor=$(node -e "console.log('${version}'.split('.').slice(0, 2).join('.'))")
    - docker buildx create --use
    - docker buildx build --push --pull -t "$CI_REGISTRY_IMAGE/$CI_COMMIT_BRANCH:latest" -t "$CI_REGISTRY_IMAGE/$CI_COMMIT_BRANCH:$CI_COMMIT_SHORT_SHA" -t "$CI_REGISTRY_IMAGE/$CI_COMMIT_BRANCH:$version"  -t "$CI_REGISTRY_IMAGE/$CI_COMMIT_BRANCH:$major" -t "$CI_REGISTRY_IMAGE/$CI_COMMIT_BRANCH:$minor" --platform linux/amd64,linux/arm64 .
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "dev"
      exists:
        - Dockerfile

tagging:
  image: node:18-alpine
  stage: deploy
  allow_failure: true
  before_script:
    - apk add git
    - git config --global user.name metahkg-bot
    - git config --global user.email bot@metahkg.org
    - git config pull.rebase false
    - git remote set-url origin https://root:$GITLAB_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH
  script:
    - tag=$(node -e "console.log(require('./package.json').version)")
    - if [ $CI_COMMIT_BRANCH = "dev" ]; then tag=${tag}-dev; fi;
    - "if [ $CI_COMMIT_BRANCH = 'dev' ];
       then yarn install;
       yarn generate-changelog;
       git add CHANGELOG.md;
       git commit -m 'update: CHANGELOG.md'; fi;"
    - git tag "$tag"
    - "if [ $CI_COMMIT_BRANCH = 'dev' ]; then
         git fetch origin $CI_COMMIT_BRANCH;
         git checkout dev;
         git merge -X theirs origin/$CI_COMMIT_BRANCH -m 'merge';
         yarn generate-changelog;
         git add CHANGELOG.md;
         git commit -m 'update: CHANGELOG.md';
         git push origin $CI_COMMIT_BRANCH;
         fi;"
  rules:
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: $CI_COMMIT_BRANCH != "master" && $CI_COMMIT_BRANCH != "dev"
      when: never
    - if: $CI_COMMIT_AUTHOR != "metahkg-bot <bot@metahkg.org>"
      changes:
        - package.json

publish:
  image: node:18-alpine
  stage: deploy
  allow_failure: true
  script:
    - yarn install
    - yarn lint
    - yarn build
    # login to npm registry
    - echo '//registry.npmjs.org/:_authToken=${NPM_TOKEN}' >> .npmrc
    # Extract a few values from package.json
    - NPM_PACKAGE_ORIGINAL_VERSION=$(node -p "require('./package.json').version")
    - NPM_PACKAGE_VERSION=$CI_COMMIT_TAG
    - sed -i "s/${NPM_PACKAGE_ORIGINAL_VERSION}/${NPM_PACKAGE_VERSION}/" package.json
    - if [ "$CI_COMMIT_TAG" = "${NPM_PACKAGE_ORIGINAL_VERSION}-dev" ]; then npm publish --tag dev --access=public; else npm publish --access=public; fi;
  rules:
    - if: "$CI_COMMIT_TAG"

container_scanning:
  stage: review
  needs: ["docker-build"]
  variables:
    GIT_STRATEGY: fetch
    CI_APPLICATION_REPOSITORY: "$CI_REGISTRY_IMAGE/$CI_COMMIT_BRANCH"
    CI_APPLICATION_TAG: $CI_COMMIT_SHORT_SHA
    CLAIR_OUTPUT: High
  artifacts:
    paths:
      - gl-container-scanning-report.json
  rules:
    - if: "$CI_COMMIT_TAG"
      when: never
    - if: $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "dev"
      exists:
        - Dockerfile

test:
  stage: test
  rules:
     - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
     - if: $CI_COMMIT_TAG
     - if: $CI_COMMIT_BRANCH

code_quality:
  stage: test
  rules:
     - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
     - if: $CI_COMMIT_TAG
     - if: $CI_COMMIT_BRANCH

build:
  stage: build
  retry: 2
  rules:
    - if: $CI_COMMIT_BRANCH
      when: never

apifuzzer_fuzz:
  needs: ["docker-build"]
  services:
    - name: mongo:latest
      alias: mongodb
    - name: redis:latest
      alias: redis
    - name: "$CI_REGISTRY_IMAGE/$CI_COMMIT_BRANCH:$CI_COMMIT_SHORT_SHA"
      alias: metahkg-server
      variables:
        MONGO_URI: "mongodb://mongodb:27017"
        REDIS_HOST: "redis"
        DISABLE_CAPTCHA: "true"
        DOMAIN: "metahkg.gitlab.ci"
  variables:
    FUZZAPI_TARGET_URL: "http://metahkg-server:3000"
    FUZZAPI_OPENAPI: ./openapi.yaml
    FUZZAPI_PROFILE: "Quick-10"
    FUZZAPI_OVERRIDES_FILE: "auth.json"
  before_script:
    - apk add curl nodejs npm git
    - npm install -g mongosh
    - "mongosh \"mongodb://mongodb:27017\" --eval 'db.getSiblingDB(\"metahkg\").users.insertOne({\"id\": 1, \"createdAt\": new Date(), \"name\": \"test\", \"email\": \"221f4570c71cfc011eb99b789da9f11f6692583be390a7ced5e3e1952b4e1de8\", password: \"${ds:-$}2b${ds:-$}10${ds:-$}2NUAAt.MkSUgszKA6JpKae3NxlUFzrSgFPVIz5VjsU2MITD.ehFi.\", sex: \"M\", role: \"user\"})'"
    - "curl -H 'Content-Type: application/json' -X POST http://metahkg-server:3000/api/auth/login --data-raw '{\"name\": \"test\", \"password\": \"f2ca1bb6c7e907d06dafe4687e579fce76b37e4e93b7605022da52e6ccc26fd2\"}' -o response.json"
    - "node -e 'const fs = require(\"fs\"); const json = JSON.parse(fs.readFileSync(\"response.json\", \"utf-8\")); const { token } = json; fs.writeFileSync(\"auth.json\", `{ \"headers\": { \"Authorization\": \"Bearer ` + token + `\" } }`)'"
  rules:
    - if: $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "dev"

trigger_api_generate:
  variables:
    UPDATE: "true"
  trigger:
    project: $CI_PROJECT_NAMESPACE/metahkg-api
    branch: $CI_COMMIT_BRANCH
  rules:
    - if: $CI_COMMIT_BRANCH != "master" && $CI_COMMIT_BRANCH != "dev"
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - changes:
      - openapi.yaml

trigger_openapi_spec:
  variables:
    UPDATE: "true"
    branch: $CI_COMMIT_BRANCH
  trigger:
    project: $CI_PROJECT_NAMESPACE/openapi-spec
  rules:
    - if: $CI_COMMIT_BRANCH != "master" && $CI_COMMIT_BRANCH != "dev"
      when: never
    - if: "$CI_COMMIT_TAG"
      when: never
    - changes:
      - openapi.yaml

include:
  - template: Auto-DevOps.gitlab-ci.yml
  - template: Security/API-Fuzzing.gitlab-ci.yml
  - template: Security/BAS.latest.gitlab-ci.yml
