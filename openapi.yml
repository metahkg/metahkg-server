openapi: 3.0.0
info:
  version: "3.2.0-dev"
  title: Metahkg Api
  description:
    "The Metahkg Api is a REST api written in fastify/typescript, with MongoDB as the database.
    <br>
    Json is returned on every request.
    <br>
    In this documentation, the base url is /api."
  contact:
    email: wcyat@wcyat.me
  license:
    name: AGPL-3.0-or-later
    url: https://gitlab.com/metahkg/openapi-spec/-/blob/master/LICENSE.md

externalDocs:
  url: https://gitlab.com/metahkg/metahkg-server
  description: Server source code

tags:
  - name: thread
    description: thread operations
  - name: comment
    description: comment operations
  - name: users
    description: account operations
  - name: profile
    description: profile operations
  - name: menu
    description: menu operations (get list of threads based on criteria)

paths:
  /thread/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - thread
      summary: Get thread
      description: "Get a selection of comments and other data from a thread.
        [Source](https://gitlab.com/metahkg/metahkg-server/-/blob/3.2.0-dev/src/routes/thread/thread.ts)"
      operationId: getThread
      parameters:
        - in: path
          name: id
          description: thread id
          required: true
          schema:
            $ref: "#/components/schemas/Thread/properties/id"
        - in: query
          name: page
          description: Page number. Ignored if start and end both specified.
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
            default: 1
        - in: query
          name: limit
          description: Limit of comments per page.
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 50
            default: 25
        - in: query
          name: sort
          description: 'Sort comments by score / time / latest.
            "time" means sorting acsendingly by created time,
            "latest" means desceningly,
            "score" means sorting descendingly by `upvotes - downvotes`'
          required: false
          schema:
            type: string
            enum:
              - score
              - time
              - latest
            default: time
        - in: query
          name: start
          description: "Starting from comment id.
            If end is specified but start is not,
            start default to `(page - 1) * limit + 1`"
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
        - in: query
          name: end
          description: "Ending at comment id.
            Must be greater or equal to start.
            If start is specified but end is not,
            end defaults to `page * limit`"
          required: false
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Thread"
        "400":
          $ref: "#/components/responses/Invalid"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: "Thread not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /thread/create:
    post:
      security:
        - bearerAuth: []
      tags:
        - thread
      summary: Create thread
      description: "Create a thread. Authentication is required.
        [Source](https://gitlab.com/metahkg/metahkg-server/-/blob/3.2.0-dev/src/routes/thread/create.ts)"
      operationId: createThread
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - comment
                - rtoken
                - category
              properties:
                title:
                  $ref: "#/components/schemas/Thread/properties/title"
                comment:
                  $ref: "#/components/schemas/CommentC/properties/comment"
                rtoken:
                  $ref: "#/components/schemas/rtoken"
                category:
                  $ref: "#/components/schemas/Category/properties/id"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: "#/components/schemas/Thread/properties/id"
        "400":
          $ref: "#/components/responses/Invalid"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "Category not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "429":
          $ref: "#/components/responses/RecaptchaInvalid"
  /thread/{id}/comment:
    post:
      security:
        - bearerAuth: []
      tags:
        - comment
      summary: Create comment
      description: "Create a new comment in the specified thread.
        Authentication is required.
        [Source](https://gitlab.com/metahkg/metahkg-server/-/blob/3.2.0-dev/src/routes/thread/comment/create.ts)"
      operationId: CreateComment
      parameters:
        - in: path
          name: id
          required: true
          description: thread id
          schema:
            $ref: "#/components/schemas/Thread/properties/id"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  $ref: "#/components/schemas/CommentC/properties/comment"
                rtoken:
                  $ref: "#/components/schemas/rtoken"
                quote:
                  nullable: true
                  anyOf:
                    - $ref: "#/components/schemas/CommentC/properties/id"
              required:
                - comment
                - rtoken
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: "#/components/schemas/CommentC/properties/id"
        "400":
          $ref: "#/components/responses/Invalid"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "Thread not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "429":
          $ref: "#/components/responses/RecaptchaInvalid"
  /thread/{id}/comment/{cid}:
    get:
      tags:
        - comment
      summary: Get comment
      description: "Get a comment from a thread with thread id and comment id.
        [Source](https://gitlab.com/metahkg/metahkg-server/-/blob/3.2.0-dev/src/routes/thread/comment/comment.ts)"
      parameters:
        - in: path
          name: id
          required: true
          description: thread id
          schema:
            $ref: "#/components/schemas/Thread/properties/id"
        - in: path
          name: cid
          required: true
          description: comment id
          schema:
            $ref: "#/components/schemas/CommentC/properties/id"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"
        "400":
          $ref: "#/components/responses/Invalid"
        "404":
          description: "Thread or comment not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /thread/{id}/comment/{cid}/replies:
    get:
      tags:
        - comment
      summary: Get replies
      description: "Get the full comment objects of replies to the specified comment.
        [Source](https://gitlab.com/metahkg/metahkg-server/-/blob/3.2.0-dev/src/routes/thread/comment/replies.ts)"
      parameters:
        - in: path
          name: id
          description: thread id
          required: true
          schema:
            $ref: "#/components/schemas/Thread/properties/id"
        - in: path
          name: cid
          description: comment id
          required: true
          schema:
            $ref: "#/components/schemas/CommentC/properties/id"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/Comment"
        "400":
          $ref: "#/components/responses/Invalid"
        "404":
          description: "Thread or comment not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "410":
          $ref: "#/components/responses/CommentRemoved"
  /thread/{id}/comment/{cid}/vote:
    post:
      tags:
        - comment
      security:
        - bearerAuth: []
      summary: Vote on comment
      description: "Vote on a comment. Authentication is required.
        [Source](https://gitlab.com/metahkg/metahkg-server/-/blob/3.2.0-dev/src/routes/thread/comment/vote.ts)"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                vote:
                  $ref: "#/components/schemas/Vote"
      parameters:
        - in: path
          name: id
          description: thread id
          required: true
          schema:
            $ref: "#/components/schemas/Thread/properties/id"
        - in: path
          name: cid
          description: comment id
          required: true
          schema:
            $ref: "#/components/schemas/CommentC/properties/id"
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "Thread or comment not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "410":
          $ref: "#/components/responses/CommentRemoved"
        "429":
          description: "User has already voted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /thread/check:
    get:
      tags:
        - thread
      summary: Check if a thread exists
      description: "Check if a thread exists.
        [Source](https://gitlab.com/metahkg/metahkg-server/-/blob/3.2.0-dev/src/routes/thread/checkExist.ts)"
      parameters:
        - in: query
          name: id
          description: thread id
          required: true
          schema:
            $ref: "#/components/schemas/Thread/properties/id"
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "404":
          description: "Thread not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /thread/{id}/images:
    get:
      tags:
        - thread
      deprecated: true
      summary: Get thread images
      description: "
        > **_Deprecated_**: Use `/thread/{id}` instead.
        Get the images of a thread.
        [Source](https://gitlab.com/metahkg/metahkg-server/-/blob/3.2.0-dev/src/routes/thread/images.ts)"
      parameters:
        - in: path
          name: id
          description: thread id
          required: true
          schema:
            $ref: "#/components/schemas/Thread/properties/id"
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Images"
        "400":
          $ref: "#/components/responses/Invalid"
        "404":
          description: "Thread not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /thread/{id}/comment/{cid}/pin:
    put:
      tags:
        - thread
      security:
        - bearerAuth: []
      summary: Pin comment
      description: "Pin a comment in a thread. Authentication is required.
        Works only if the user is the original poster of the thread.
        [Source](https://gitlab.com/metahkg/metahkg-server/-/blob/3.2.0-dev/src/routes/thread/comment/pin.ts)"
      parameters:
        - in: path
          name: id
          description: thread id
          required: true
          schema:
            $ref: "#/components/schemas/Thread/properties/id"
        - in: path
          name: cid
          description: comment id
          required: true
          schema:
            $ref: "#/components/schemas/CommentC/properties/id"
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "400":
          $ref: "#/components/responses/Invalid"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "Thread or comment not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "410":
          $ref: "#/components/responses/CommentRemoved"
  /thread/{id}/comment/{cid}/unpin:
    put:
      tags:
        - thread
      security:
        - bearerAuth: []
      summary: Unpin comment
      description: "Unpin a pinned comment in a thread. Authentication is required.
        Works only if the user is the original poster of the thread.
        [Source](https://gitlab.com/metahkg/metahkg-server/-/blob/3.2.0-dev/src/routes/thread/comment/unpin.ts)"
      parameters:
        - in: path
          name: id
          description: thread id
          required: true
          schema:
            $ref: "#/components/schemas/Thread/properties/id"
        - in: path
          name: cid
          description: comment id
          required: true
          schema:
            $ref: "#/components/schemas/CommentC/properties/id"
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "400":
          $ref: "#/components/responses/Invalid"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          description: "Thread or comment not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: "Comment not pinned"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
servers:
  - url: https://dev.metahkg.org/api

components:
  responses:
    OK:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              response:
                type: string
                enum:
                  - ok
    Invalid:
      description: "Invalid request"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      description: "Unauthorized"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    RecaptchaInvalid:
      description: "Recaptcha token invalid"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Forbidden:
      description: "Forbidden"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    CommentRemoved:
      description: "Comment removed"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: error message
    Vote:
      type: string
      description: Vote. "U" means upvote. "D" means downvote.
      enum:
        - "U"
        - "D"
    User:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
          format: int64
          description: user id
        name:
          type: string
          description: User name
          example: "John Doe"
          minLength: 1
          maxLength: 15
        sex:
          type: string
          enum:
            - M
            - F
        createdAt:
          type: string
          format: date-time
          description: date when user was created
    Category:
      type: object
      properties:
        id:
          type: integer
          minimum: 1
          format: int64
          description: category id
        name:
          type: string
          description: category name
          example: "Chit-chat"
    Image:
      type: object
      properties:
        cid:
          $ref: "#/components/schemas/CommentC/properties/id"
        src:
          type: string
          format: uri
          description: image source url
          example: "https://images.unsplash.com/photo-1459478309853-2c33a60058e7"
    Images:
      type: array
      description: List of images in comments. Duplicated images (with the same url) are not included.
      items:
        $ref: "#/components/schemas/Image"
    RemovedComment:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/CommentC/properties/id"
        removed:
          type: boolean
          enum:
            - true
    CommentC:
      type: object
      description: "Comment object with constants only (without upvotes, downvotes and replies)"
      required:
        - id
        - user
        - comment
        - text
        - images
        - createdAt
        - slink
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          description: comment id
        user:
          description: user created the comment
          anyOf:
            - $ref: "#/components/schemas/User"
        comment:
          type: string
          description: comment in stringified html
          example: "<p>This is a comment</p>"
        text:
          type: string
          description: comment converted to plain text
          example: "This is a comment"
        images:
          type: array
          items:
            $ref: "#/components/schemas/Image/properties/src"
        createdAt:
          type: string
          format: date-time
        slink:
          type: string
          format: uri
          description: shortened link to the comment
          example: "https://l.metahkg.org/p994Nw2"
        quote:
          nullable: true
          description: The whole comment object of the quoted comment.
          anyOf:
            - $ref: "#/components/schemas/CommentC"
          example:
            id: 1
            user:
              id: 1
              name: "John Doe"
              sex: "M"
              createdAt: "2020-01-01T00:00:00Z"
            comment: "<p>This is a comment</p>"
            text: "This is a comment"
            createdAt: "2020-01-01T00:00:00Z"
            slink: "https://l.metahkg.org/p994Nw2"
    Comment:
      allOf:
        - $ref: "#/components/schemas/CommentC"
        - type: object
          description: Comment object
          properties:
            D:
              nullable: true
              type: integer
              format: int64
              minimum: 0
              description: number of downvotes
            U:
              nullable: true
              type: integer
              format: int64
              minimum: 0
              description: number of upvotes
            replies:
              nullable: true
              type: array
              items:
                type: integer
                minimum: 1
                format: int64
              description: list of comment ids that are replies to this comment
    Thread:
      type: object
      required:
        - id
        - title
        - category
        - op
        - c
        - conversation
        - images
        - createdAt
        - lastModified
        - slink
        - score
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
          description: thread id
        title:
          type: string
          description: thread title
          example: "Hello world"
        category:
          $ref: "#/components/schemas/Category/properties/id"
        op:
          $ref: "#/components/schemas/User"
        c:
          type: integer
          format: int64
          minimum: 1
          description: number of comments in the thread (i.e. `conversation.length`)
        conversation:
          type: array
          description: An array of comments. Comment ids must not be duplicated.
          items:
            anyOf:
              - $ref: "#/components/schemas/RemovedComment"
              - allOf:
                  - $ref: "#/components/schemas/Comment"
                  - type: object
                    properties:
                      score:
                        type: integer
                        format: int64
                        description: score of the comment (`upvotes - downvotes`)
        score:
          type: integer
          format: int64
          description: score of the thread (first comment) (`upvotes - downvotes`)
        images:
          $ref: "#/components/schemas/Images"
        createdAt:
          type: string
          format: date-time
          description: date when thread was created
        lastModified:
          type: string
          format: date-time
          description: date when thread was last modified
        slink:
          type: string
          description: shortened link to the thread
          example: "https://l.metahkg.org/1"
        pin:
          description: pinned comment
          nullable: true
          anyOf:
            - $ref: "#/components/schemas/CommentC"
    rtoken:
      type: string
      description: Recaptcha token. See https://developers.google.com/recaptcha/docs/verify.
      example: "6LeIxAcTAAAAAJcZVRqd76R7tjHpI9u0tRwxV5ksM"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
